{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from math import exp\n",
    "from scipy.stats import norm\n",
    "from scipy import stats\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import statsmodels.formula.api as smf\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import math\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/envs/learn-env/lib/python3.6/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (7) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('Citywide_Payroll_Data__Fiscal_Year_.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = ['Payroll Number','Last Name', 'First Name','Mid Init','Total Other Pay','Regular Gross Paid','Title Description'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "zero_dict = {'CEASED': np.nan,\n",
    "            'ON LEAVE': np.nan,\n",
    "            'SEASONAL': np.nan,\n",
    "            'ON SEPARATION LEAVE': np.nan}\n",
    "\n",
    "df['Leave Status as of June 30'].replace(zero_dict, inplace = True)\n",
    "\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['start_year'] = df['Agency Start Date'].apply(lambda x: int(x[6:]))\n",
    "df['years_with_city'] = df[['Fiscal Year']].sub(df['start_year'], axis=0)\n",
    "df.drop(columns = ['Agency Start Date','Leave Status as of June 30'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "na_dict= {'OTHER' : np.nan,\n",
    "'RICHMOND' : np.nan,\n",
    "'WESTCHESTER' : np.nan,\n",
    "'ULSTER' : np.nan,\n",
    "'SULLIVAN' : np.nan,\n",
    "'DELAWARE' : np.nan,\n",
    "'PUTNAM' : np.nan,\n",
    "'NASSAU' : np.nan,\n",
    "'SCHOHARIE' : np.nan,\n",
    "'Richmond' : np.nan,\n",
    "'DUTCHESS' : np.nan,\n",
    "'ALBANY' : np.nan,\n",
    "'GREENE' : np.nan,\n",
    "'WASHINGTON DC' : np.nan,\n",
    "'ORANGE' : np.nan }\n",
    "df['Work Location Borough'].replace(na_dict, inplace = True)\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# clean up work location\n",
    "df.loc[df['Work Location Borough'] =='MANHATTAN', 'Work Location Borough']= 'Manhattan'\n",
    "df.loc[df['Work Location Borough'] =='QUEENS', 'Work Location Borough']= 'Queens'\n",
    "df.loc[df['Work Location Borough'] =='BROOKLYN', 'Work Location Borough']= 'Brooklyn'\n",
    "df.loc[df['Work Location Borough'] =='BRONX', 'Work Location Borough']= 'Bronx'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Work Location Borough']=='Bronx','Work Location Borough']=1\n",
    "df.loc[df['Work Location Borough']=='Brooklyn','Work Location Borough']=2\n",
    "df.loc[df['Work Location Borough']=='Manhattan','Work Location Borough']=3\n",
    "df.loc[df['Work Location Borough']=='Queens','Work Location Borough']=4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "per Annum          1380931\n",
       "per Day             531586\n",
       "per Hour            416422\n",
       "Prorated Annual       9054\n",
       "Name: Pay Basis, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Pay Basis'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "pay_dict= {'per Day' : np.nan,\n",
    "'per Hour' : np.nan,\n",
    "'Prorated Annual' : np.nan}\n",
    "df['Pay Basis'].replace(pay_dict, inplace = True)\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fiscal Year</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Work Location Borough</th>\n",
       "      <th>Base Salary</th>\n",
       "      <th>Pay Basis</th>\n",
       "      <th>Regular Hours</th>\n",
       "      <th>OT Hours</th>\n",
       "      <th>Total OT Paid</th>\n",
       "      <th>start_year</th>\n",
       "      <th>years_with_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>762964</td>\n",
       "      <td>2015</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>27617.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>764677</td>\n",
       "      <td>2015</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>33329.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>764906</td>\n",
       "      <td>2015</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>37966.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>767672</td>\n",
       "      <td>2015</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>35915.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>768055</td>\n",
       "      <td>2015</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>35915.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3021027</td>\n",
       "      <td>2019</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>33209.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3022080</td>\n",
       "      <td>2019</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>33629.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3022427</td>\n",
       "      <td>2019</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>33209.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3022495</td>\n",
       "      <td>2019</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>33209.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3022526</td>\n",
       "      <td>2019</td>\n",
       "      <td>DEPT OF ED PARA PROFESSIONALS</td>\n",
       "      <td>3</td>\n",
       "      <td>33209.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9999</td>\n",
       "      <td>-7980</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>227 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Fiscal Year                    Agency Name  Work Location Borough  \\\n",
       "762964          2015  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "764677          2015  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "764906          2015  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "767672          2015  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "768055          2015  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "...              ...                            ...                    ...   \n",
       "3021027         2019  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "3022080         2019  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "3022427         2019  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "3022495         2019  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "3022526         2019  DEPT OF ED PARA PROFESSIONALS                      3   \n",
       "\n",
       "         Base Salary  Pay Basis  Regular Hours  OT Hours  Total OT Paid  \\\n",
       "762964       27617.0  per Annum            0.0       0.0            0.0   \n",
       "764677       33329.0  per Annum            0.0       0.0            0.0   \n",
       "764906       37966.0  per Annum            0.0       0.0            0.0   \n",
       "767672       35915.0  per Annum            0.0       0.0            0.0   \n",
       "768055       35915.0  per Annum            0.0       0.0            0.0   \n",
       "...              ...        ...            ...       ...            ...   \n",
       "3021027      33209.0  per Annum            0.0       0.0            0.0   \n",
       "3022080      33629.0  per Annum            0.0       0.0            0.0   \n",
       "3022427      33209.0  per Annum            0.0       0.0            0.0   \n",
       "3022495      33209.0  per Annum            0.0       0.0            0.0   \n",
       "3022526      33209.0  per Annum            0.0       0.0            0.0   \n",
       "\n",
       "         start_year  years_with_city  \n",
       "762964         9999            -7984  \n",
       "764677         9999            -7984  \n",
       "764906         9999            -7984  \n",
       "767672         9999            -7984  \n",
       "768055         9999            -7984  \n",
       "...             ...              ...  \n",
       "3021027        9999            -7980  \n",
       "3022080        9999            -7980  \n",
       "3022427        9999            -7980  \n",
       "3022495        9999            -7980  \n",
       "3022526        9999            -7980  \n",
       "\n",
       "[227 rows x 10 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['years_with_city']<0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Regular Hours']>3000, 'Regular Hours'] = np.nan\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['years_with_city']<0, 'years_with_city'] = np.nan\n",
    "df.loc[df['years_with_city']>100, 'years_with_city'] = np.nan\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fiscal Year</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Work Location Borough</th>\n",
       "      <th>Base Salary</th>\n",
       "      <th>Pay Basis</th>\n",
       "      <th>Regular Hours</th>\n",
       "      <th>OT Hours</th>\n",
       "      <th>Total OT Paid</th>\n",
       "      <th>start_year</th>\n",
       "      <th>years_with_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>540115</td>\n",
       "      <td>2016</td>\n",
       "      <td>OFFICE OF THE COMPTROLLER</td>\n",
       "      <td>3</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>1830.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2122095</td>\n",
       "      <td>2017</td>\n",
       "      <td>OFFICE OF THE COMPTROLLER</td>\n",
       "      <td>3</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>1825.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2389485</td>\n",
       "      <td>2018</td>\n",
       "      <td>DEPT OF ED PEDAGOGICAL</td>\n",
       "      <td>3</td>\n",
       "      <td>345000.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2743662</td>\n",
       "      <td>2019</td>\n",
       "      <td>OFFICE OF THE COMPTROLLER</td>\n",
       "      <td>3</td>\n",
       "      <td>350000.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>1825.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2012</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2892771</td>\n",
       "      <td>2019</td>\n",
       "      <td>DEPT OF ED PEDAGOGICAL</td>\n",
       "      <td>3</td>\n",
       "      <td>352763.0</td>\n",
       "      <td>per Annum</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2018</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Fiscal Year                Agency Name  Work Location Borough  \\\n",
       "540115          2016  OFFICE OF THE COMPTROLLER                      3   \n",
       "2122095         2017  OFFICE OF THE COMPTROLLER                      3   \n",
       "2389485         2018     DEPT OF ED PEDAGOGICAL                      3   \n",
       "2743662         2019  OFFICE OF THE COMPTROLLER                      3   \n",
       "2892771         2019     DEPT OF ED PEDAGOGICAL                      3   \n",
       "\n",
       "         Base Salary  Pay Basis  Regular Hours  OT Hours  Total OT Paid  \\\n",
       "540115      350000.0  per Annum         1830.0       0.0            0.0   \n",
       "2122095     350000.0  per Annum         1825.0       0.0            0.0   \n",
       "2389485     345000.0  per Annum            0.0       0.0            0.0   \n",
       "2743662     350000.0  per Annum         1825.0       0.0            0.0   \n",
       "2892771     352763.0  per Annum            0.0       0.0            0.0   \n",
       "\n",
       "         start_year  years_with_city  \n",
       "540115         2014              2.0  \n",
       "2122095        2014              3.0  \n",
       "2389485        2018              0.0  \n",
       "2743662        2012              7.0  \n",
       "2892771        2018              1.0  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['Base Salary']>330000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Base Salary']<20000, 'Base Salary'] = np.nan\n",
    "df.loc[df['Base Salary']>330000, 'Base Salary'] = np.nan\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Fiscal Year']==2014, 'Fiscal Year'] = np.nan\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df['Fiscal Year'].astype('int64', copy=False)\n",
    "df['Fiscal Year'] = df['Fiscal Year'].astype(np.int64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('int64')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Fiscal Year'].dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Salary by Fiscal Year')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x=df['Fiscal Year'], y=df['Base Salary'],line_kws={\"color\":\"r\",\"alpha\":0.7,\"lw\":5}).set_title('Salary by Fiscal Year')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Salary by Years with City')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x=df['years_with_city'], y=df['Base Salary'],line_kws={\"color\":\"r\",\"alpha\":0.7,\"lw\":5}).set_title('Salary by Years with City')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.DataFrame.hist(df,figsize=(12,12))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# df.groupby('Fiscal Year')['Base Salary'].mean().plot(kind='bar')\n",
    "# plt.ylabel('Average Base Salary')\n",
    "\n",
    "# plt.title('Average NYC City Employee Salary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "621"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Agency Name'].value_counts().nsmallest(50).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.loc[df['Agency Name'].str.contains(\"COMMUNITY BOARD\"), 'Agency Name'] = np.nan\n",
    "df.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fiscal Year</th>\n",
       "      <th>Agency Name</th>\n",
       "      <th>Work Location Borough</th>\n",
       "      <th>Base Salary</th>\n",
       "      <th>Pay Basis</th>\n",
       "      <th>Regular Hours</th>\n",
       "      <th>OT Hours</th>\n",
       "      <th>Total OT Paid</th>\n",
       "      <th>start_year</th>\n",
       "      <th>years_with_city</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Fiscal Year, Agency Name, Work Location Borough, Base Salary, Pay Basis, Regular Hours, OT Hours, Total OT Paid, start_year, years_with_city]\n",
       "Index: []"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Agency Name'].str.contains(\"COMMUNITY BOARD\")]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a39cc4ef0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corrmat = df[['Fiscal Year','Agency Name','Work Location Borough','Base Salary', \n",
    "              'Regular Hours', 'OT Hours','years_with_city']].corr()\n",
    "sns.set(font_scale=1)\n",
    "fig,ax= plt.subplots()\n",
    "fig.set_size_inches(10,10)\n",
    "plt.tight_layout()\n",
    "sns.heatmap(corrmat,square=True,annot=True, cbar = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = [x.replace(' ', '_') for x in df.columns]\n",
    "df.columns = [x.replace('#','') for x in df.columns]\n",
    "df.columns = [x.replace(\"'\", '') for x in df.columns]\n",
    "df.columns = [x.replace('.','') for x in df.columns]\n",
    "df.columns = [x.replace('(','') for x in df.columns]\n",
    "df.columns = [x.replace(')','') for x in df.columns]\n",
    "df.columns = [x.replace('&','_') for x in df.columns]\n",
    "df.columns = [x.replace('-','_') for x in df.columns]\n",
    "df.columns = [x.replace('/','_') for x in df.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "agency_dummies = pd.get_dummies(df['Agency_Name'], prefix='agency', drop_first=True)\n",
    "borough_dummies = pd.get_dummies(df['Work_Location_Borough'], prefix='borough', drop_first=True)\n",
    "df = pd.concat([df, agency_dummies], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = ['Agency_Name','start_year','Pay_Basis'], axis=1, inplace=True)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating features column without the dependent variable\n",
    "\n",
    "features = list(df.columns)\n",
    "features.remove('Base_Salary')\n",
    "\n",
    "def listToString(s):\n",
    "    # initialize an empty string\n",
    "    str1 = \" \"\n",
    "    # return string\n",
    "    return (str1.join(s))\n",
    "\n",
    "new_feature = listToString(features)\n",
    "new_features = new_feature.replace(' ', ' + ')\n",
    "\n",
    "features2 = 'Base_Salary ~ ' + new_features\n",
    "features2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# scale continuous variables\n",
    "subset =['Regular_Hours', 'OT_Hours', 'Total_OT_Paid', 'years_with_city']\n",
    "scaler = StandardScaler()\n",
    "subset_scaled = []\n",
    "for var in subset:\n",
    "    new_col = var +\"_scaled\"\n",
    "    df[new_col] = scaler.fit_transform(df[[var]])\n",
    "    subset_scaled.append(new_col)\n",
    "subset_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a scaled features columns\n",
    "featuresSC = list(df.columns)\n",
    "featuresSC.remove('Base_Salary')\n",
    "featuresSC.remove('Regular_Hours')\n",
    "featuresSC.remove('OT_Hours')\n",
    "featuresSC.remove('Total_OT_Paid')\n",
    "featuresSC.remove('years_with_city')\n",
    "new_featureSC = listToString(featuresSC)\n",
    "new_featuresSC = new_featureSC.replace(' ', ' + ')\n",
    "featuresScaled = 'Base_Salary ~ ' + new_featuresSC  \n",
    "featuresScaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# from statsmodels.formula.api import ols\n",
    "# mlr_model=ols(formula=features2, data=df).fit()\n",
    "# mlr_model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
